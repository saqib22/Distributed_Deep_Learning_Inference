# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_service_pb2 as grpc__service__pb2


class DAMAStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.receive_bid = channel.unary_unary(
                '/grpc_service.DAMA/receive_bid',
                request_serializer=grpc__service__pb2.Bid.SerializeToString,
                response_deserializer=grpc__service__pb2.ServerResponse.FromString,
                )
        self.get_server_price = channel.unary_unary(
                '/grpc_service.DAMA/get_server_price',
                request_serializer=grpc__service__pb2.Price.SerializeToString,
                response_deserializer=grpc__service__pb2.Price.FromString,
                )


class DAMAServicer(object):
    """The greeting service definition.
    """

    def receive_bid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_server_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DAMAServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'receive_bid': grpc.unary_unary_rpc_method_handler(
                    servicer.receive_bid,
                    request_deserializer=grpc__service__pb2.Bid.FromString,
                    response_serializer=grpc__service__pb2.ServerResponse.SerializeToString,
            ),
            'get_server_price': grpc.unary_unary_rpc_method_handler(
                    servicer.get_server_price,
                    request_deserializer=grpc__service__pb2.Price.FromString,
                    response_serializer=grpc__service__pb2.Price.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_service.DAMA', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DAMA(object):
    """The greeting service definition.
    """

    @staticmethod
    def receive_bid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service.DAMA/receive_bid',
            grpc__service__pb2.Bid.SerializeToString,
            grpc__service__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_server_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service.DAMA/get_server_price',
            grpc__service__pb2.Price.SerializeToString,
            grpc__service__pb2.Price.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
